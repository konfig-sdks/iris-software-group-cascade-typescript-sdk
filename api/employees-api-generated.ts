/* tslint:disable */
/* eslint-disable */
/*
HR API

<a href='swaggerv2.json'>Download Swagger Json in OAS2 Format.</a>

The version of the OpenAPI document: 2
Contact: hrapi@iris.co.uk

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Address } from '../models';
// @ts-ignore
import { CreateEmployeeCommand } from '../models';
// @ts-ignore
import { Email } from '../models';
// @ts-ignore
import { EmployeeModel } from '../models';
// @ts-ignore
import { EmployeeQueryModel } from '../models';
// @ts-ignore
import { Phone } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { UpdateEmployeeCommand } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeesApi - axios parameter creator
 * @export
 */
export const EmployeesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new Employee.
         * @param {CreateEmployeeCommand} [createEmployeeCommand] New Employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEmployee: async (createEmployeeCommand?: CreateEmployeeCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true; version=2';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createEmployeeCommand,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createEmployeeCommand, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a single Employee referenced by ID.
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of Employees.
         * @param {number} [$top] Show only the first n items, maximum of 250, see [Paging - Top](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop)
         * @param {number} [$skip] Skip the first n items, see [Paging - Skip](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)
         * @param {string} [$filter] Filter items by property values, see [Filtering](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)
         * @param {Array<string>} [$select] Select properties to be returned, see [Select](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)
         * @param {string} [$orderby] Order items by property values, see [Sorting](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)
         * @param {boolean} [$count] Include count of items, see [Count](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async ($top?: number, $skip?: number, $filter?: string, $select?: Array<string>, $orderby?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)
            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an Employee referenced by ID.
         * @param {string} id The ID of Employee to update.
         * @param {UpdateEmployeeCommand} [updateEmployeeCommand] The new state of the Employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (id: string, updateEmployeeCommand?: UpdateEmployeeCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateById', 'id', id)
            const localVarPath = `/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true; version=2';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateEmployeeCommand,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmployeeCommand, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeesApi - functional programming interface
 * @export
 */
export const EmployeesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new Employee.
         * @param {EmployeesApiCreateNewEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewEmployee(requestParameters: EmployeesApiCreateNewEmployeeRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const createEmployeeCommand: CreateEmployeeCommand = {
                DisplayId: requestParameters.DisplayId,
                TitleHonorific: requestParameters.TitleHonorific,
                FirstName: requestParameters.FirstName,
                KnownAs: requestParameters.KnownAs,
                OtherName: requestParameters.OtherName,
                LastName: requestParameters.LastName,
                CostCentre: requestParameters.CostCentre,
                WorkingStatus: requestParameters.WorkingStatus,
                IsManager: requestParameters.IsManager,
                NationalInsuranceNumber: requestParameters.NationalInsuranceNumber,
                PayrollId: requestParameters.PayrollId,
                TaxCode: requestParameters.TaxCode,
                IncludeInPayroll: requestParameters.IncludeInPayroll,
                EmploymentStartDate: requestParameters.EmploymentStartDate,
                EmploymentLeftDate: requestParameters.EmploymentLeftDate,
                ContinuousServiceDate: requestParameters.ContinuousServiceDate,
                DateOfBirth: requestParameters.DateOfBirth,
                LastWorkingDate: requestParameters.LastWorkingDate,
                Gender: requestParameters.Gender,
                Ethnicity: requestParameters.Ethnicity,
                Nationality: requestParameters.Nationality,
                Religion: requestParameters.Religion,
                LeaverReason: requestParameters.LeaverReason,
                MaritalStatus: requestParameters.MaritalStatus,
                Phones: requestParameters.Phones,
                Emails: requestParameters.Emails,
                Addresses: requestParameters.Addresses,
                GenderIdentity: requestParameters.GenderIdentity,
                WindowsUsername: requestParameters.WindowsUsername
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewEmployee(createEmployeeCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a single Employee referenced by ID.
         * @param {EmployeesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: EmployeesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of Employees.
         * @param {EmployeesApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: EmployeesApiGetListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeQueryModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.$top, requestParameters.$skip, requestParameters.$filter, requestParameters.$select, requestParameters.$orderby, requestParameters.$count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an Employee referenced by ID.
         * @param {EmployeesApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: EmployeesApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const updateEmployeeCommand: UpdateEmployeeCommand = {
                DisplayId: requestParameters.DisplayId,
                TitleHonorific: requestParameters.TitleHonorific,
                FirstName: requestParameters.FirstName,
                KnownAs: requestParameters.KnownAs,
                OtherName: requestParameters.OtherName,
                LastName: requestParameters.LastName,
                CostCentre: requestParameters.CostCentre,
                WorkingStatus: requestParameters.WorkingStatus,
                IsManager: requestParameters.IsManager,
                NationalInsuranceNumber: requestParameters.NationalInsuranceNumber,
                PayrollId: requestParameters.PayrollId,
                TaxCode: requestParameters.TaxCode,
                IncludeInPayroll: requestParameters.IncludeInPayroll,
                EmploymentStartDate: requestParameters.EmploymentStartDate,
                EmploymentLeftDate: requestParameters.EmploymentLeftDate,
                ContinuousServiceDate: requestParameters.ContinuousServiceDate,
                DateOfBirth: requestParameters.DateOfBirth,
                LastWorkingDate: requestParameters.LastWorkingDate,
                Gender: requestParameters.Gender,
                Ethnicity: requestParameters.Ethnicity,
                Nationality: requestParameters.Nationality,
                Religion: requestParameters.Religion,
                LeaverReason: requestParameters.LeaverReason,
                MaritalStatus: requestParameters.MaritalStatus,
                Phones: requestParameters.Phones,
                Emails: requestParameters.Emails,
                Addresses: requestParameters.Addresses,
                GenderIdentity: requestParameters.GenderIdentity,
                WindowsUsername: requestParameters.WindowsUsername,
                Id: requestParameters.Id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.id, updateEmployeeCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeesApi - factory interface
 * @export
 */
export const EmployeesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeesApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new Employee.
         * @param {EmployeesApiCreateNewEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEmployee(requestParameters: EmployeesApiCreateNewEmployeeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createNewEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a single Employee referenced by ID.
         * @param {EmployeesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: EmployeesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeModel> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of Employees.
         * @param {EmployeesApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: EmployeesApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EmployeeQueryModel> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an Employee referenced by ID.
         * @param {EmployeesApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: EmployeesApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewEmployee operation in EmployeesApi.
 * @export
 * @interface EmployeesApiCreateNewEmployeeRequest
 */
export type EmployeesApiCreateNewEmployeeRequest = {
    
} & CreateEmployeeCommand

/**
 * Request parameters for getById operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetByIdRequest
 */
export type EmployeesApiGetByIdRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof EmployeesApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for getList operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetListRequest
 */
export type EmployeesApiGetListRequest = {
    
    /**
    * Show only the first n items, maximum of 250, see [Paging - Top](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop)
    * @type {number}
    * @memberof EmployeesApiGetList
    */
    readonly $top?: number
    
    /**
    * Skip the first n items, see [Paging - Skip](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)
    * @type {number}
    * @memberof EmployeesApiGetList
    */
    readonly $skip?: number
    
    /**
    * Filter items by property values, see [Filtering](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)
    * @type {string}
    * @memberof EmployeesApiGetList
    */
    readonly $filter?: string
    
    /**
    * Select properties to be returned, see [Select](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)
    * @type {Array<string>}
    * @memberof EmployeesApiGetList
    */
    readonly $select?: Array<string>
    
    /**
    * Order items by property values, see [Sorting](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)
    * @type {string}
    * @memberof EmployeesApiGetList
    */
    readonly $orderby?: string
    
    /**
    * Include count of items, see [Count](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)
    * @type {boolean}
    * @memberof EmployeesApiGetList
    */
    readonly $count?: boolean
    
}

/**
 * Request parameters for updateById operation in EmployeesApi.
 * @export
 * @interface EmployeesApiUpdateByIdRequest
 */
export type EmployeesApiUpdateByIdRequest = {
    
    /**
    * The ID of Employee to update.
    * @type {string}
    * @memberof EmployeesApiUpdateById
    */
    readonly id: string
    
} & UpdateEmployeeCommand

/**
 * EmployeesApiGenerated - object-oriented interface
 * @export
 * @class EmployeesApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Creates a new Employee.
     * @param {EmployeesApiCreateNewEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public createNewEmployee(requestParameters: EmployeesApiCreateNewEmployeeRequest = {}, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).createNewEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a single Employee referenced by ID.
     * @param {EmployeesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public getById(requestParameters: EmployeesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of Employees.
     * @param {EmployeesApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public getList(requestParameters: EmployeesApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an Employee referenced by ID.
     * @param {EmployeesApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public updateById(requestParameters: EmployeesApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
