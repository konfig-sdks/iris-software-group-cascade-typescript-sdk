/* tslint:disable */
/* eslint-disable */
/*
HR API

<a href='swaggerv2.json'>Download Swagger Json in OAS2 Format.</a>

The version of the OpenAPI document: 2
Contact: hrapi@iris.co.uk

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BankAddress } from '../models';
// @ts-ignore
import { BankDetailsModel } from '../models';
// @ts-ignore
import { BankDetailsQueryModel } from '../models';
// @ts-ignore
import { CreateBankDetailsCommand } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { UpdateBankDetailsCommand } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BankDetailsApi - axios parameter creator
 * @export
 */
export const BankDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a Bank Details.
         * @param {CreateBankDetailsCommand} [createBankDetailsCommand] The value of Bank Details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBankDetail: async (createBankDetailsCommand?: CreateBankDetailsCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bankdetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true; version=1';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createBankDetailsCommand,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/bankdetails',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createBankDetailsCommand, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a single Bank Details by an ID.
         * @param {string} id Bank Details ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/bankdetails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/bankdetails/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of Bank Details.
         * @param {number} [$top] Show only the first n items, maximum of 250, see [Paging - Top](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop)
         * @param {number} [$skip] Skip the first n items, see [Paging - Skip](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)
         * @param {string} [$filter] Filter items by property values, see [Filtering](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)
         * @param {Array<string>} [$select] Select properties to be returned, see [Select](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)
         * @param {string} [$orderby] Order items by property values, see [Sorting](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)
         * @param {boolean} [$count] Include count of items, see [Count](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async ($top?: number, $skip?: number, $filter?: string, $select?: Array<string>, $orderby?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bankdetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)
            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/bankdetails',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates Bank Details.
         * @param {string} id The ID of Bank Details to update.
         * @param {UpdateBankDetailsCommand} [updateBankDetailsCommand] The value of Bank Details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBankDetail: async (id: string, updateBankDetailsCommand?: UpdateBankDetailsCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBankDetail', 'id', id)
            const localVarPath = `/bankdetails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true; version=1';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateBankDetailsCommand,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/bankdetails/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateBankDetailsCommand, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankDetailsApi - functional programming interface
 * @export
 */
export const BankDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a Bank Details.
         * @param {BankDetailsApiCreateBankDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBankDetail(requestParameters: BankDetailsApiCreateBankDetailRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const createBankDetailsCommand: CreateBankDetailsCommand = {
                EmployeeId: requestParameters.EmployeeId,
                BankName: requestParameters.BankName,
                BankAddress: requestParameters.BankAddress,
                AccountName: requestParameters.AccountName,
                AccountNumber: requestParameters.AccountNumber,
                SortCode: requestParameters.SortCode,
                RollNumber: requestParameters.RollNumber
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBankDetail(createBankDetailsCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a single Bank Details by an ID.
         * @param {BankDetailsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: BankDetailsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankDetailsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of Bank Details.
         * @param {BankDetailsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: BankDetailsApiGetListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankDetailsQueryModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.$top, requestParameters.$skip, requestParameters.$filter, requestParameters.$select, requestParameters.$orderby, requestParameters.$count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates Bank Details.
         * @param {BankDetailsApiUpdateBankDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBankDetail(requestParameters: BankDetailsApiUpdateBankDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const updateBankDetailsCommand: UpdateBankDetailsCommand = {
                BankName: requestParameters.BankName,
                BankAddress: requestParameters.BankAddress,
                AccountName: requestParameters.AccountName,
                AccountNumber: requestParameters.AccountNumber,
                SortCode: requestParameters.SortCode,
                RollNumber: requestParameters.RollNumber,
                Id: requestParameters.Id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBankDetail(requestParameters.id, updateBankDetailsCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BankDetailsApi - factory interface
 * @export
 */
export const BankDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankDetailsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a Bank Details.
         * @param {BankDetailsApiCreateBankDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBankDetail(requestParameters: BankDetailsApiCreateBankDetailRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createBankDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a single Bank Details by an ID.
         * @param {BankDetailsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: BankDetailsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<BankDetailsModel> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of Bank Details.
         * @param {BankDetailsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: BankDetailsApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BankDetailsQueryModel> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates Bank Details.
         * @param {BankDetailsApiUpdateBankDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBankDetail(requestParameters: BankDetailsApiUpdateBankDetailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateBankDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBankDetail operation in BankDetailsApi.
 * @export
 * @interface BankDetailsApiCreateBankDetailRequest
 */
export type BankDetailsApiCreateBankDetailRequest = {
    
} & CreateBankDetailsCommand

/**
 * Request parameters for getById operation in BankDetailsApi.
 * @export
 * @interface BankDetailsApiGetByIdRequest
 */
export type BankDetailsApiGetByIdRequest = {
    
    /**
    * Bank Details ID.
    * @type {string}
    * @memberof BankDetailsApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for getList operation in BankDetailsApi.
 * @export
 * @interface BankDetailsApiGetListRequest
 */
export type BankDetailsApiGetListRequest = {
    
    /**
    * Show only the first n items, maximum of 250, see [Paging - Top](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop)
    * @type {number}
    * @memberof BankDetailsApiGetList
    */
    readonly $top?: number
    
    /**
    * Skip the first n items, see [Paging - Skip](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)
    * @type {number}
    * @memberof BankDetailsApiGetList
    */
    readonly $skip?: number
    
    /**
    * Filter items by property values, see [Filtering](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)
    * @type {string}
    * @memberof BankDetailsApiGetList
    */
    readonly $filter?: string
    
    /**
    * Select properties to be returned, see [Select](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)
    * @type {Array<string>}
    * @memberof BankDetailsApiGetList
    */
    readonly $select?: Array<string>
    
    /**
    * Order items by property values, see [Sorting](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)
    * @type {string}
    * @memberof BankDetailsApiGetList
    */
    readonly $orderby?: string
    
    /**
    * Include count of items, see [Count](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)
    * @type {boolean}
    * @memberof BankDetailsApiGetList
    */
    readonly $count?: boolean
    
}

/**
 * Request parameters for updateBankDetail operation in BankDetailsApi.
 * @export
 * @interface BankDetailsApiUpdateBankDetailRequest
 */
export type BankDetailsApiUpdateBankDetailRequest = {
    
    /**
    * The ID of Bank Details to update.
    * @type {string}
    * @memberof BankDetailsApiUpdateBankDetail
    */
    readonly id: string
    
} & UpdateBankDetailsCommand

/**
 * BankDetailsApiGenerated - object-oriented interface
 * @export
 * @class BankDetailsApiGenerated
 * @extends {BaseAPI}
 */
export class BankDetailsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Creates a Bank Details.
     * @param {BankDetailsApiCreateBankDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankDetailsApiGenerated
     */
    public createBankDetail(requestParameters: BankDetailsApiCreateBankDetailRequest = {}, options?: AxiosRequestConfig) {
        return BankDetailsApiFp(this.configuration).createBankDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a single Bank Details by an ID.
     * @param {BankDetailsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankDetailsApiGenerated
     */
    public getById(requestParameters: BankDetailsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return BankDetailsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of Bank Details.
     * @param {BankDetailsApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankDetailsApiGenerated
     */
    public getList(requestParameters: BankDetailsApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return BankDetailsApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates Bank Details.
     * @param {BankDetailsApiUpdateBankDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankDetailsApiGenerated
     */
    public updateBankDetail(requestParameters: BankDetailsApiUpdateBankDetailRequest, options?: AxiosRequestConfig) {
        return BankDetailsApiFp(this.configuration).updateBankDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
