/* tslint:disable */
/* eslint-disable */
/*
HR API

<a href='swaggerv2.json'>Download Swagger Json in OAS2 Format.</a>

The version of the OpenAPI document: 2
Contact: hrapi@iris.co.uk

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PublicHolidayModel } from '../models';
// @ts-ignore
import { PublicHolidayQueryModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PublicHolidaysApi - axios parameter creator
 * @export
 */
export const PublicHolidaysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets a location based Public Holiday list by ID.
         * @param {string} id Public Holiday ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationListById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLocationListById', 'id', id)
            const localVarPath = `/publicholidays/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/publicholidays/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a set of Public Holidays with locations.
         * @param {number} [$top] Show only the first n items, maximum of 250, see [Paging - Top](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop)
         * @param {number} [$skip] Skip the first n items, see [Paging - Skip](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)
         * @param {string} [$filter] Filter items by property values, see [Filtering](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)
         * @param {Array<string>} [$select] Select properties to be returned, see [Select](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)
         * @param {string} [$orderby] Order items by property values, see [Sorting](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)
         * @param {boolean} [$count] Include count of items, see [Count](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocations: async ($top?: number, $skip?: number, $filter?: string, $select?: Array<string>, $orderby?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/publicholidays`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)
            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/publicholidays',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicHolidaysApi - functional programming interface
 * @export
 */
export const PublicHolidaysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicHolidaysApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets a location based Public Holiday list by ID.
         * @param {PublicHolidaysApiGetLocationListByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationListById(requestParameters: PublicHolidaysApiGetLocationListByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicHolidayModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocationListById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a set of Public Holidays with locations.
         * @param {PublicHolidaysApiGetLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocations(requestParameters: PublicHolidaysApiGetLocationsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicHolidayQueryModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocations(requestParameters.$top, requestParameters.$skip, requestParameters.$filter, requestParameters.$select, requestParameters.$orderby, requestParameters.$count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicHolidaysApi - factory interface
 * @export
 */
export const PublicHolidaysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicHolidaysApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets a location based Public Holiday list by ID.
         * @param {PublicHolidaysApiGetLocationListByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationListById(requestParameters: PublicHolidaysApiGetLocationListByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PublicHolidayModel> {
            return localVarFp.getLocationListById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a set of Public Holidays with locations.
         * @param {PublicHolidaysApiGetLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocations(requestParameters: PublicHolidaysApiGetLocationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PublicHolidayQueryModel> {
            return localVarFp.getLocations(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getLocationListById operation in PublicHolidaysApi.
 * @export
 * @interface PublicHolidaysApiGetLocationListByIdRequest
 */
export type PublicHolidaysApiGetLocationListByIdRequest = {
    
    /**
    * Public Holiday ID.
    * @type {string}
    * @memberof PublicHolidaysApiGetLocationListById
    */
    readonly id: string
    
}

/**
 * Request parameters for getLocations operation in PublicHolidaysApi.
 * @export
 * @interface PublicHolidaysApiGetLocationsRequest
 */
export type PublicHolidaysApiGetLocationsRequest = {
    
    /**
    * Show only the first n items, maximum of 250, see [Paging - Top](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop)
    * @type {number}
    * @memberof PublicHolidaysApiGetLocations
    */
    readonly $top?: number
    
    /**
    * Skip the first n items, see [Paging - Skip](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)
    * @type {number}
    * @memberof PublicHolidaysApiGetLocations
    */
    readonly $skip?: number
    
    /**
    * Filter items by property values, see [Filtering](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)
    * @type {string}
    * @memberof PublicHolidaysApiGetLocations
    */
    readonly $filter?: string
    
    /**
    * Select properties to be returned, see [Select](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)
    * @type {Array<string>}
    * @memberof PublicHolidaysApiGetLocations
    */
    readonly $select?: Array<string>
    
    /**
    * Order items by property values, see [Sorting](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)
    * @type {string}
    * @memberof PublicHolidaysApiGetLocations
    */
    readonly $orderby?: string
    
    /**
    * Include count of items, see [Count](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)
    * @type {boolean}
    * @memberof PublicHolidaysApiGetLocations
    */
    readonly $count?: boolean
    
}

/**
 * PublicHolidaysApiGenerated - object-oriented interface
 * @export
 * @class PublicHolidaysApiGenerated
 * @extends {BaseAPI}
 */
export class PublicHolidaysApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Gets a location based Public Holiday list by ID.
     * @param {PublicHolidaysApiGetLocationListByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicHolidaysApiGenerated
     */
    public getLocationListById(requestParameters: PublicHolidaysApiGetLocationListByIdRequest, options?: AxiosRequestConfig) {
        return PublicHolidaysApiFp(this.configuration).getLocationListById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a set of Public Holidays with locations.
     * @param {PublicHolidaysApiGetLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicHolidaysApiGenerated
     */
    public getLocations(requestParameters: PublicHolidaysApiGetLocationsRequest = {}, options?: AxiosRequestConfig) {
        return PublicHolidaysApiFp(this.configuration).getLocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
